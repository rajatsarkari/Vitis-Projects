// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.0
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _foo_foo_HH_
#define _foo_foo_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "foo_foo_mul_32s_8s_32_1_1.h"

namespace ap_rtl {

struct foo_foo : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_in< sc_lv<8> > a;
    sc_in< sc_lv<8> > b;
    sc_in< sc_lv<8> > c;
    sc_out< sc_lv<2> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;


    // Module declarations
    foo_foo(sc_module_name name);
    SC_HAS_PROCESS(foo_foo);

    ~foo_foo();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    foo_foo_mul_32s_8s_32_1_1<1,1,32,8,32>* foo_mul_32s_8s_32_1_1_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_reg_104;
    sc_signal< sc_lv<32> > conv_fu_115_p1;
    sc_signal< sc_lv<32> > conv_reg_165;
    sc_signal< sc_lv<32> > sext_ln5_fu_133_p1;
    sc_signal< sc_lv<32> > sext_ln5_reg_170;
    sc_signal< sc_lv<1> > icmp_ln3_fu_137_p2;
    sc_signal< sc_lv<1> > icmp_ln3_reg_175;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > add_ln3_fu_143_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln4_fu_149_p1;
    sc_signal< sc_lv<64> > zext_ln4_reg_184;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<9> > sext_ln3_fu_123_p1;
    sc_signal< sc_lv<9> > b_cast_fu_119_p1;
    sc_signal< sc_lv<9> > add_ln5_fu_127_p2;
    sc_signal< sc_lv<8> > mul_ln5_fu_154_p1;
    sc_signal< sc_lv<32> > mul_ln5_fu_154_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln3_fu_143_p2();
    void thread_add_ln5_fu_127_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_b_cast_fu_119_p1();
    void thread_conv_fu_115_p1();
    void thread_icmp_ln3_fu_137_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_mul_ln5_fu_154_p1();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_sext_ln3_fu_123_p1();
    void thread_sext_ln5_fu_133_p1();
    void thread_zext_ln4_fu_149_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
